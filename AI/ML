{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/msayur/Data_Science/blob/main/AI/ML\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HKmorPdno_n_"
      },
      "source": [
        "\n",
        "\n",
        "Version 1: Updated June 9, 2023\n",
        "\n",
        "<font color='red'>\\# TODO: fill in the below</font>\n",
        "\n",
        "- [Ayodeji, Bamgboye]\n",
        "\n",
        "- [Favorite book]\n",
        "- [08-08-2023]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "emfFtv4aHBI1"
      },
      "source": [
        "# Assignment Instructions\n",
        "\n",
        "This assignment contains four questions. The questions are fully contained in this Google Colab Notebook.\n",
        "\n",
        "You are to make a copy of this Notebook and edit the copy to provide your answers. You are to complete the assignment entirely within Google Colab. Why?\n",
        "\n",
        "- It gives you practice using cloud-based interactive notebook environments (which is a popular workflow)\n",
        "- It is easier for you to manage the environment (e.g., installing packages, etc.)\n",
        "- Google Colab has nice, beefy machines, so you don't have to worry about running out of memory on your local computer.\n",
        "- It will be easier for the TA to help you debug your code if you need help\n",
        "- It will be easier for the TA to mark/run your code\n",
        "\n",
        "Some parts of this assigment require you to write code. Use Python or R. For Python, you may use standard Python libraries, including `scikit-learn`, `pandas`, `numpy`, and `scipy`. For R, you may use `dplyr`, `caret`, `ggplot2`, `rpart` and other standard libraries.\n",
        "\n",
        "Some parts of this assignment require text responses. In these cases, type your response in the Notebook cell indicated. Use English. Use proper grammar, spelling, and punctuation. Be professional and clear. Be complete, but not overly-verbose. Feel free to use [Markdown syntax](https://www.markdownguide.org/basic-syntax/) to format your answer (i.e., add bold, italics, lists, tables).\n",
        "\n",
        "## What to Submit to the Course Portal\n",
        "\n",
        "- Export your completed Notebook as a PDF file by clicking File->Print->Save as PDF.\n",
        "- Please do not submit the Notebook file (`.ipynb`) to the course portal.\n",
        "- Please submit the PDF export of the Notebook.\n",
        "   - Please name the PDF file `2024_869_FirstnameLastName.pdf`\n",
        "      - E.g., `2024_869_StephenThomas.pdf`\n",
        "   - Please make sure you have run all the cells so we can see the output!\n",
        "   - Best practice: Before exporting to PDF click Runtime->Restart and run all.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oZFTCX4DqmRO"
      },
      "source": [
        "# Preliminaries: Inspect and Set up environment\n",
        "\n",
        "No action is required on your part in this section. These cells print out helpful information about the environment, just in case."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xj34Jz-Do_oK"
      },
      "source": [
        "import datetime\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "import subprocess\n",
        "\n",
        "from google.colab import data_table\n",
        "data_table.enable_dataframe_formatter()\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error as mse, r2_score\n",
        "from sklearn.model_selection import KFold, StratifiedKFold\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import silhouette_score\n",
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from sklearn.metrics import silhouette_score, calinski_harabasz_score\n",
        "from sklearn.decomposition import PCA\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mqQ_XOKyXTS6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "b73ac060-8f2b-4aa3-c933-ed358b81c075"
      },
      "source": [
        "print(datetime.datetime.now())"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2023-08-10 01:26:35.006014\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "LfOMt1lErLhZ",
        "outputId": "de63a352-aa30-49a4-c392-7020276e2c2b"
      },
      "source": [
        "!which python"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/usr/local/bin/python\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "aub2w1-arM5K",
        "outputId": "55a88053-3c14-4936-e691-1c5d73da8afa"
      },
      "source": [
        "!python --version"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python 3.10.12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "E9Y_n_8UrO9i",
        "outputId": "e3bdbed2-330d-480e-be08-6deb519129bb"
      },
      "source": [
        "!echo $PYTHONPATH"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/env/python\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-qyD7Jl0Gw1E"
      },
      "source": [
        "# TODO: install any packages you need to here. For example:\n",
        "#pip install unidecode"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RLlBjIyS2o54"
      },
      "source": [
        "# Question 1: Uncle Steve's Diamonds"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qj1NSQelo_oN"
      },
      "source": [
        "## Instructions\n",
        "\n",
        "You work at a local jewelry store named *Uncle Steve's Diamonds*. You started as a janitor, but you’ve recently been promoted to senior data analyst. Congratulations!\n",
        "\n",
        "Uncle Steve, the store's owner, needs to better understand the store's customers. In particular, he wants to know what kind of customers shop at the store. He wants to know the main types of *customer personas*. Once he knows these, he will contemplate ways to better market to each persona, better satisfy each persona, better cater to each persona, increase the loyalty of each persona, etc. But first, he must know the personas.\n",
        "\n",
        "You want to help Uncle Steve. Using sneaky magic (and the help of Environics), you've collected four useful features for a subset of the customers: age, income, spending score (i.e., a score based on how much they’ve spent at the store in total), and savings (i.e., how much money they have in their bank account).\n",
        "\n",
        "**Your tasks**\n",
        "\n",
        "1. Pick a clustering algorithm (the [`sklearn.cluster`](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.cluster) module has many good choices, including [`KMeans`](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans), [`DBSCAN`](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN), and [`AgglomerativeClustering`](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html#sklearn.cluster.AgglomerativeClustering) (aka Hierarchical)). (Note that another popular implementation of the hierarchical algorithm can be found in SciPy's [`scipy.cluster.hierarchy.linkage`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html).) Don't spend a lot of time thinking about which algorithm to choose - just pick one. Cluster the customers as best as you can, within reason. That is, try different feature preprocessing steps, hyperparameter values, and/or distance metrics. You don't need to try every posssible combination, but try a few at least. Measure how good each  model configuration is by calculating an internal validation metric (e.g., [`calinski_harabasz_score`](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.calinski_harabasz_score.html) or [`silhouette_score`](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score)).\n",
        "2. You have some doubts - you're not sure if the algorithm you chose in part 1 is the best algorithm for this dataset/problem. Neither is Uncle Steve. So, choose a different algorithm (any!) and do it all again.\n",
        "3. Which clustering algorithm is \"better\" in this case? Think about charateristics of the algorithm like quality of results, ease of use, speed, interpretability, etc. Choose a \"winner\" and justify to Uncle Steve.\n",
        "4. Interpret the clusters of the winning model. That is, describe, in words, a *persona* that accurately depicts each cluster. Use statistics (e.g., cluster means/distributions), examples (e.g., exemplar instances from each cluster), and/or visualizations (e.g., relative importance plots, snakeplots) to get started. Human judgement and creativity will be necessary. This is where it all comes together. Be descriptive and *help Uncle Steve understand his customers better*. Please!\n",
        "\n",
        "**Marking**\n",
        "\n",
        "The coding parts (i.e., 1 and 2) will be marked based on:\n",
        "\n",
        "- *Correctness*. Code clearly and fully performs the task specified.\n",
        "- *Reproducibility*. Code is fully reproducible. I.e., you (and I) are able to run this Notebook again and again, from top to bottom, and get the same results each time.\n",
        "- *Style*. Code is organized. All parts commented with clear reasoning and rationale. No old code laying around. Code easy to follow.\n",
        "\n",
        "\n",
        "Parts 3 and 4 will be marked on:\n",
        "\n",
        "- *Quality*. Response is well-justified and convincing. Responses uses facts and data where possible.\n",
        "- *Style*. Response uses proper grammar, spelling, and punctuation. Response is clear and professional. Response is complete, but not overly-verbose. Response follows length guidelines.\n",
        "\n",
        "\n",
        "**Tips**\n",
        "\n",
        "- Since clustering is an unsupervised ML technique, you don't need to split the data into training/validation/test or anything like that. Phew!\n",
        "- On the flip side, since clustering is unsupervised, you will never know the \"true\" clusters, and so you will never know if a given algorithm is \"correct.\" There really is no notion of \"correctness\" - only \"usefullness.\"\n",
        "- Many online clustering tutorials (including some from Uncle Steve) create flashy visualizations of the clusters by plotting the instances on a 2-D graph and coloring each point by the cluster ID. This is really nice and all, but it can only work if your dataset only has exactly two features - no more, no less. This dataset has more than two features, so you cannot use this technique. (But that's OK - you don't need to use this technique.)\n",
        "- Must you use all four features in the clustering? Not necessarily, no. But \"throwing away\" quality data, for no reason, is unlikely to improve a model.\n",
        "- Some people have success applying a dimensionality reduction technique (like [`sklearn.decomposition.PCA`](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html)) to the features before clustering. You may do this if you wish, although it may not be as helpful in this case because there are only four features to begin with.\n",
        "- If you apply a transformation (e.g., [`MinMaxScaler`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html) or [`StandardScaler`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler)) to the features before clustering, you may have difficulty interpretting the means of the clusters (e.g., what is a mean Age of 0.2234??). There are two options to fix this: first, you can always reverse a transformation with the `inverse_transform` method. Second, you can just use the original dataset (i.e., before any preprocessing) during the interpreation step.\n",
        "- You cannot change the distance metric for K-Means. (This is for theoretical reasons: K-Means only works/makes sense with Euclidean distance.)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yww0-vtpOw7z"
      },
      "source": [
        "## 1.0: Load data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "qVWx2c-DhQYo",
        "outputId": "00a5e30c-01b6-47e1-d9c2-9c33a2175722"
      },
      "source": [
        "# DO NOT MODIFY THIS CELL\n",
        "df1 = pd.read_csv(\"https://drive.google.com/uc?export=download&id=1thHDCwQK3GijytoSSZNekAsItN_FGHtm\")\n",
        "df1.info()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 505 entries, 0 to 504\n",
            "Data columns (total 4 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Age            505 non-null    int64  \n",
            " 1   Income         505 non-null    int64  \n",
            " 2   SpendingScore  505 non-null    float64\n",
            " 3   Savings        505 non-null    float64\n",
            "dtypes: float64(2), int64(2)\n",
            "memory usage: 15.9 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R04NzckZKbG2"
      },
      "source": [
        "## 1.1: Clustering Algorithm #1"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Features for clustering\n",
        "features = ['Age', 'Income', 'SpendingScore', 'Savings']\n",
        "\n",
        "# Standardize the features\n",
        "scaler = StandardScaler()\n",
        "scaled_features = scaler.fit_transform(df1[features])\n",
        "\n",
        "# Try different number of clusters and evaluate using silhouette score\n",
        "best_silhouette_score = -1\n",
        "best_calinski_harabasz_score = -1\n",
        "best_clusters = 0\n",
        "\n",
        "for n_clusters in range(2, 11):\n",
        "    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "    labels = kmeans.fit_predict(scaled_features)\n",
        "    silhouette = silhouette_score(scaled_features, labels)\n",
        "    calinski_harabasz = calinski_harabasz_score(scaled_features, labels)\n",
        "\n",
        "    if silhouette > best_silhouette_score:\n",
        "        best_silhouette_score = silhouette\n",
        "        best_clusters = n_clusters\n",
        "        best_silhouette_labels = labels\n",
        "\n",
        "    if calinski_harabasz > best_calinski_harabasz_score:\n",
        "        best_calinski_harabasz_score = calinski_harabasz\n",
        "        best_calinski_harabasz_labels = labels\n",
        "\n",
        "print(\"Best number of clusters:\", best_clusters)\n",
        "print(\"Best silhouette score:\", best_silhouette_score)\n",
        "print(\"Best Calinski-Harabasz score:\", best_calinski_harabasz_score)\n",
        "\n",
        "df1['silhouette_cluster_label'] = best_silhouette_labels\n",
        "df1['calinski_cluster_label'] = best_calinski_harabasz_labels\n",
        "\n",
        "df1['cluster_label'] = best_labels\n",
        "\n",
        "# Calculate cluster profiles (mean values of each cluster's features)\n",
        "cluster_profiles = df1.groupby('cluster_label').mean()\n",
        "print(cluster_profiles)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "uS6XAtGaXUQp",
        "outputId": "5f446335-5e4a-440a-cfa0-91f76f0af127"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best number of clusters: 5\n",
            "Best silhouette score: 0.8048976287755765\n",
            "Best Calinski-Harabasz score: 3671.358018517615\n",
            "                     Age         Income  SpendingScore       Savings  \\\n",
            "cluster_label                                                          \n",
            "0              87.775510   27866.102041       0.328800  16659.261445   \n",
            "1              59.955414   72448.063694       0.771518   6889.972190   \n",
            "2              32.777778  105265.809524       0.309926  14962.778066   \n",
            "3              24.180000  128029.120000       0.896892   4087.520309   \n",
            "4              86.000000  119944.040000       0.068378  14808.683793   \n",
            "\n",
            "               silhouette_cluster_label  calinski_cluster_label  \n",
            "cluster_label                                                    \n",
            "0                                   2.0                     2.0  \n",
            "1                                   1.0                     1.0  \n",
            "2                                   0.0                     0.0  \n",
            "3                                   3.0                     3.0  \n",
            "4                                   4.0                     4.0  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the K-means model with the best number of clusters\n",
        "kmeans = KMeans(n_clusters=best_clusters, random_state=42)\n",
        "labels = kmeans.fit_predict(scaled_features)\n",
        "\n",
        "# Add cluster labels to the original DataFrame\n",
        "df1['Cluster'] = labels\n",
        "\n",
        "# Interpret the clusters based on cluster characteristics\n",
        "for cluster_id in range(best_clusters):\n",
        "    cluster_data = df1[df1['Cluster'] == cluster_id]\n",
        "    cluster_mean = cluster_data.mean()\n",
        "    cluster_std = cluster_data.std()\n",
        "\n",
        "    print(f\"\\nCluster {cluster_id + 1} Persona:\")\n",
        "    print(\"-------------------------\")\n",
        "    print(f\"Age: Mean={cluster_mean['Age']:.2f} years, Std Dev={cluster_std['Age']:.2f}\")\n",
        "    print(f\"Income: Mean=${cluster_mean['Income']:.2f}, Std Dev=${cluster_std['Income']:.2f}\")\n",
        "    print(f\"Spending Score: Mean={cluster_mean['SpendingScore']:.2f}, Std Dev={cluster_std['SpendingScore']:.2f}\")\n",
        "    print(f\"Savings: Mean=${cluster_mean['Savings']:.2f}, Std Dev=${cluster_std['Savings']:.2f}\")\n"
      ],
      "metadata": {
        "id": "_BWD_LiCEHht",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "d79ef98d-1e8d-4e12-88c0-38ac53d2a825"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Cluster 1 Persona:\n",
            "-------------------------\n",
            "Age: Mean=32.78 years, Std Dev=3.79\n",
            "Income: Mean=$105265.81, Std Dev=$6080.62\n",
            "Spending Score: Mean=0.31, Std Dev=0.05\n",
            "Savings: Mean=$14962.78, Std Dev=$1061.73\n",
            "\n",
            "Cluster 2 Persona:\n",
            "-------------------------\n",
            "Age: Mean=59.96 years, Std Dev=3.38\n",
            "Income: Mean=$72448.06, Std Dev=$6240.26\n",
            "Spending Score: Mean=0.77, Std Dev=0.05\n",
            "Savings: Mean=$6889.97, Std Dev=$1052.28\n",
            "\n",
            "Cluster 3 Persona:\n",
            "-------------------------\n",
            "Age: Mean=87.78 years, Std Dev=3.51\n",
            "Income: Mean=$27866.10, Std Dev=$6448.81\n",
            "Spending Score: Mean=0.33, Std Dev=0.05\n",
            "Savings: Mean=$16659.26, Std Dev=$1183.85\n",
            "\n",
            "Cluster 4 Persona:\n",
            "-------------------------\n",
            "Age: Mean=24.18 years, Std Dev=3.66\n",
            "Income: Mean=$128029.12, Std Dev=$5688.90\n",
            "Spending Score: Mean=0.90, Std Dev=0.04\n",
            "Savings: Mean=$4087.52, Std Dev=$1277.75\n",
            "\n",
            "Cluster 5 Persona:\n",
            "-------------------------\n",
            "Age: Mean=86.00 years, Std Dev=3.66\n",
            "Income: Mean=$119944.04, Std Dev=$4941.05\n",
            "Spending Score: Mean=0.07, Std Dev=0.04\n",
            "Savings: Mean=$14808.68, Std Dev=$1159.34\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Visualize the clusters using scatter plots\n",
        "sns.set(style=\"whitegrid\")\n",
        "\n",
        "# Define the features for visualization\n",
        "feature1 = 'Income'\n",
        "feature2 = 'SpendingScore'\n",
        "\n",
        "# Create scatter plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(x=feature1, y=feature2, hue='Cluster', data=df1, palette='viridis', s=100)\n",
        "plt.title('K-means Clustering: Customer Segmentation')\n",
        "plt.xlabel(feature1)\n",
        "plt.ylabel(feature2)\n",
        "plt.legend(title='Cluster')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "OCRwd30zE7B-",
        "outputId": "f4b5c7cc-ff64-4529-f7c8-b6fadbb45d27"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ihVtYBWg1NM6"
      },
      "source": [
        "## 1.2: Clustering Algorithm #2"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import AgglomerativeClustering\n",
        "\n",
        "# Try different linkage options and evaluate using silhouette score\n",
        "best_score = -1\n",
        "best_linkage = \"\"\n",
        "\n",
        "linkage_options = ['ward', 'complete', 'average']\n",
        "\n",
        "for linkage_option in linkage_options:\n",
        "    agglomerative = AgglomerativeClustering(n_clusters=5, linkage=linkage_option)\n",
        "    labels = agglomerative.fit_predict(scaled_features)\n",
        "    score = silhouette_score(scaled_features, labels)\n",
        "\n",
        "    if score > best_score:\n",
        "        best_score = score\n",
        "        best_linkage = linkage_option\n",
        "        best_labels = labels\n",
        "\n",
        "print(\"Best linkage option:\", best_linkage)\n",
        "print(\"Silhouette score:\", best_score)\n",
        "\n",
        "# Add cluster labels to the original DataFrame\n",
        "df1['cluster_label'] = best_labels\n",
        "\n",
        "# Apply PCA\n",
        "pca = PCA(n_components=2)\n",
        "pca_features = pca.fit_transform(scaled_features)\n",
        "\n",
        "# Create a scatter plot with cluster labels\n",
        "plt.scatter(pca_features[:, 0], pca_features[:, 1], c=df1['cluster_label'], cmap='viridis')\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.title('PCA of Customer Clusters')\n",
        "plt.show()\n",
        "\n",
        "# Describe each cluster persona based on original data\n",
        "for cluster_id in range(5):\n",
        "    cluster_data = df1[df1['cluster_label'] == cluster_id]\n",
        "    cluster_mean = cluster_data.mean()\n",
        "    cluster_std = cluster_data.std()\n",
        "\n",
        "    print(f\"\\nCluster {cluster_id + 1} Persona:\")\n",
        "    print(\"-------------------------\")\n",
        "    print(f\"Age: Mean={cluster_mean['Age']:.2f} years, Std Dev={cluster_std['Age']:.2f}\")\n",
        "    print(f\"Income: Mean=${cluster_mean['Income']:.2f}, Std Dev=${cluster_std['Income']:.2f}\")\n",
        "    print(f\"Spending Score: Mean={cluster_mean['SpendingScore']:.2f}, Std Dev={cluster_std['SpendingScore']:.2f}\")\n",
        "    print(f\"Savings: Mean=${cluster_mean['Savings']:.2f}, Std Dev=${cluster_std['Savings']:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1114
        },
        "id": "an4wVS8QU1ZA",
        "outputId": "02d711bd-6227-488e-9242-959e923bf352"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best linkage option: ward\n",
            "Silhouette score: 0.8048976287755765\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Cluster 1 Persona:\n",
            "-------------------------\n",
            "Age: Mean=87.78 years, Std Dev=3.51\n",
            "Income: Mean=$27866.10, Std Dev=$6448.81\n",
            "Spending Score: Mean=0.33, Std Dev=0.05\n",
            "Savings: Mean=$16659.26, Std Dev=$1183.85\n",
            "\n",
            "Cluster 2 Persona:\n",
            "-------------------------\n",
            "Age: Mean=59.96 years, Std Dev=3.38\n",
            "Income: Mean=$72448.06, Std Dev=$6240.26\n",
            "Spending Score: Mean=0.77, Std Dev=0.05\n",
            "Savings: Mean=$6889.97, Std Dev=$1052.28\n",
            "\n",
            "Cluster 3 Persona:\n",
            "-------------------------\n",
            "Age: Mean=32.78 years, Std Dev=3.79\n",
            "Income: Mean=$105265.81, Std Dev=$6080.62\n",
            "Spending Score: Mean=0.31, Std Dev=0.05\n",
            "Savings: Mean=$14962.78, Std Dev=$1061.73\n",
            "\n",
            "Cluster 4 Persona:\n",
            "-------------------------\n",
            "Age: Mean=24.18 years, Std Dev=3.66\n",
            "Income: Mean=$128029.12, Std Dev=$5688.90\n",
            "Spending Score: Mean=0.90, Std Dev=0.04\n",
            "Savings: Mean=$4087.52, Std Dev=$1277.75\n",
            "\n",
            "Cluster 5 Persona:\n",
            "-------------------------\n",
            "Age: Mean=86.00 years, Std Dev=3.66\n",
            "Income: Mean=$119944.04, Std Dev=$4941.05\n",
            "Spending Score: Mean=0.07, Std Dev=0.04\n",
            "Savings: Mean=$14808.68, Std Dev=$1159.34\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6ySJIgNr1Sfy"
      },
      "source": [
        "## 1.3 Model Comparison"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the characteristics of the algorithms, K-means appears to be the better choice for this particular use case:\n",
        "\n",
        "Simplicity and Ease of Use: K-means is straightforward to understand and use. Its concept of centroids and data points is intuitive, and the algorithm's implementation is relatively simple.\n",
        "\n",
        "Speed and Efficiency: K-means is known for its speed and efficiency, making it suitable for small and large datasets. Uncle Steve can obtain clustering results quickly, allowing us to make timely decisions based on customer segments.\n",
        "\n",
        "Interpretability: K-means generates clusters with clear boundaries, and the resulting cluster personas are easily interpreted. This interpretation is crucial for our marketing and customer strategies, as we can effectively customize his approach for each persona.\n",
        "\n",
        "Scalability: K-means scales well, aligning with Uncle Steve's need to analyze customer data efficiently and effectively, especially as our business grows.\n",
        "\n",
        "Specific Cluster Assignment: It assigns each customer to a particular cluster, enabling us to identify which segment each customer belongs to precisely. This specificity is valuable for targeted marketing efforts.\n",
        "\n",
        "Tabular Cluster Characteristics: The tabular format of cluster characteristics aids Uncle Steve in understanding the traits and behaviours of each customer group. This format facilitates decision-making and strategy development.\n",
        "\n",
        "Predefined Number of Clusters: While K-means requires specifying the number of clusters in advance, this aligns with Uncle Steve's need for a predetermined number of customer segments. This requirement helps us focus on the specific segments we aim to identify.\n",
        "\n",
        "It's important to note that while K-means excels in many aspects, it can not handle clusters of irregular shapes or sizes as effectively as other algorithms like Agglomerative hierarchical clustering. However, given our specific context and requirements, K-means' strengths make it a suitable and advantageous choice."
      ],
      "metadata": {
        "id": "gGEfPlfTIWV-"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MP2EAnCJ1Xta"
      },
      "source": [
        "## 1.4 Personas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dVewu2TZ1XhK"
      },
      "source": [
        "Cluster 1 Persona -I call them \"The Ambitious Achiever\" as this cluster consists of customers who are relatively young and driven, around 32 years with high income (approximately  105,000)and moderate spending score (approximately 0.3).These customers are financially well−off and might be more conservative with their spending and prioritize saving for the future.Theyhaveconsiderablesavings(approximately 14,000), indicating their discretionary spending. They may consider jewelry as investments rather than purely discretionary purchases. Uncle Steve could focus on providing them with timeless and classic pieces that hold value over time.\n",
        "\n",
        "Cluster 2 Persona – I call them \"The Savvy Shoppers\" Customers in this cluster are in their late 50s, around 60 years who, enjoy a comfortable life with a relatively comfortable income (approximately  72,000)and a high spending score(around0.77).Their average savings of 6,889 exhibit a balanced approach to spending and savings. These prudent spenders are conscious of their budgets while purchasing jewelry. They will likely appreciate value for money and could be attracted to special offers, sales or loyalty programs. Uncle Steve could engage them with promotions that highlight affordability and quality.\n",
        "\n",
        "Cluster 3 Persona - \"The Conservative Investors\": this cluster comprises older customers around 87 years, with lower income (approximately  27,000),and exhibits a low spending score (around 0.3).Despite their modest income,they have significant savings of roughly 16,000. These customers might be more conservative with their spending and prioritize future savings. They may consider jewelry as investments rather than purely discretionary purchases. Uncle Steve could focus on providing them with timeless and classic pieces that hold value over time.\n",
        "\n",
        "Cluster 4 Persona - \"The Energetic Spenders\": This cluster comprises younger customers (around 24) with relatively high income (approximately  128,000)and a high spending score(around0.9)who are young and financially empowered.They have a decent amount of savings(around 4,000). These customers might be early in their careers and interested in trendy jewelry. They might be looking for pieces that reflect their style and preferences. They could be professionals or successful entrepreneurs prioritizing premium jewelry and high-end accessories. Uncle Steve might consider targeting exclusive and upscale collections to cater to their discerning tastes and target them with fashionable collections that resonate with their youthful energy.\n",
        "\n",
        "Cluster 5 Persona – \"The Wise Savers\": This cluster comprises elderly individuals in their late eighties who value financial security. With an average income of  119,944.04,they continue to earn a reasonable income in their later years.Their exceptionally low spending score of 0.07 reflects their conservative approach to spending,focusing only on essentials.Despite their low spending,their average savings of 14,808.68 demonstrate their commitment to prudent financial planning. They prioritize maintaining their economic well-being and are likely interested in products and services that provide stability and security. Uncle Steve's might target them, offering these customers jewelry pieces that hold value over time and carry a sense of lasting worth. This aligns with their mindset of ensuring their financial well-being. Also, considering their substantial savings and low spending, offering personalized discounts or promotions on select products might attract their attention without compromising their economic values.\n",
        "\n",
        "By analyzing the cluster means, distributions, and characteristics of each cluster, we've unveiled distinct customer personas that can guide Uncle Steve's marketing, customer engagement, and product strategies. The scatter plots also provide visual insights into the income and spending score relationships within each cluster. Uncle Steve can tailor his store's offerings, promotions, and customer experiences to cater to each customer persona's unique preferences and behaviours. This understanding will aid customer satisfaction, boost loyalty, and create targeted marketing campaigns that resonate with each cluster's needs and desires. They could be professionals or successful entrepreneurs who prioritize premium jewelry and high-end accessories. Uncle Steve might consider targeting them with exclusive and upscale collections to cater to their discerning tastes."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DYwuYIgczYSv"
      },
      "source": [
        "# Question 2: Uncle Steve's Fine Foods"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4oCr-mTfNG-H"
      },
      "source": [
        "## Instructions\n",
        "\n",
        "Uncle Steve runs a small, local grocery store in Ontario. The store sells all the normal food staples (e.g., bread, milk, cheese, eggs, more cheese, fruits, vegatables, meat, fish, waffles, ice cream, pasta, cereals, drinks), personal care products (e.g., toothpaste, shampoo, hair goo), medicine, and cakes. There's even a little section with flowers and greeting cards! Normal people shop here, and buy normal things in the normal way.\n",
        "\n",
        "Business is OK but Uncle Steve wants more. He's thus on the hunt for customer insights. Given your success at the jewelry store, he has asked you to help him out.\n",
        "\n",
        "He has given you a few years' worth of customer transactions, i.e., sets of items that customers have purchased. You have applied an association rules learning algorithm (like Apriori) to the data, and the algorithm has generated a large set of association rules of the form `{X} -> {Y}`, where `{X}` and `{Y}` are item-sets.\n",
        "\n",
        "Now comes a thought experiment. For each of the following scenarios, state what one of the discovered association rules might be that would meet the stated condition. (Just make up the rule, using your human experience and intuition.) Also, describe whether and why each rule would be considered interesting or uninteresting for Uncle Steve (i.e., is this insight new to him? Would he be able to use it somehow?).\n",
        "\n",
        "Keep each answer to 600 characters or less (including spaces).\n",
        "\n",
        "To get those brain juices going, an example condition and answer is provided below:\n",
        "\n",
        "> Condition: A rule that has high support.\n",
        "\n",
        "> Answer: The rule `{milk} -> {bread}` would have high support, since milk and bread are household staples and a high percentage of transactions would include both `{milk}` and `{bread}`. Uncle Steve would likely not find this rule interesting, because these items are so common, he would have surely already noticed that so many transactions contain them.\n",
        "\n",
        "**Marking**\n",
        "\n",
        "Your responses will be marked as follows:\n",
        "\n",
        "- *Correctness*. Rule meets the specificed condition, and seems plausible in an Ontario grocery store.\n",
        "- *Justification of interestness*. Response clearly describes whether and why the rule would be considered interesting to Uncle Steve.\n",
        "\n",
        "**Tips**\n",
        "\n",
        "- There is no actual data for this question. This question is just a thought exercise. You need to use your intuition, creatitivty, and understanding of the real world. I assume you are familiar with what happens inside of normal grocery stores. We are not using actual data and you do not need to create/generate/find any data. I repeat: there is no data for this question.\n",
        "- The reason this question is having you do a thought experiment, rather than writing and running code to find actual association rules on an actual dataset, is because writing code to find association rules is actually pretty easy. But using your brain to come up with rules that meet certain criteria, on the other hand, is a true test of whether you understand how the algorithm works, what support and confidence mean, and the applicability of rules. The question uses the grocery store context because most, if not all, students should be familiar from personal experience.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3YQsOb6CzYVq"
      },
      "source": [
        "## 2.1: A rule that might have high support and high confidence."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DzXu1IvK-MEg"
      },
      "source": [
        "The rule {bread, cheese} -> {eggs} might have high support and high confidence. Customers buying bread and cheese might also purchase eggs for a typical breakfast combination. The high support indicates a frequent occurrence of this combination, while the high confidence suggests a strong association between the items. Uncle Steve could find this rule interesting as it confirms a typical purchasing pattern and a potential cross-selling opportunity that could guide arranging these items together on the shelves for convenience, which can increase sales across all three items.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VNIrAgJk-L4l"
      },
      "source": [
        "## 2.2: A rule that might have reasonably high support but low confidence."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "svdzYW3S-LvF"
      },
      "source": [
        "A rule - {pasta} -> {flowers}, this combination in a transaction is rare as they are unrelated items that are rarely purchased together. It has reasonably high support but low confidence. While pasta is a commonly purchased item, it is not directly related to flowers. The rule's low confidence suggests that the occurrence of pasta in a transaction doesn't strongly imply the presence of flowers. Uncle Steve might not find this rule particularly interesting as it doesn't provide meaningful insights or business improvement opportunities for our grocery store, as customers are not likely to purchase pasta and flowers on a regular basis as they are unrelated products."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "loe--LMz-Ll8"
      },
      "source": [
        "## 2.3: A rule that might have low support and low confidence."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HdyOB5fe-Zgy"
      },
      "source": [
        "\n",
        "{Toothpaste} -> {ice cream} might have low support and low confidence. Toothpaste and ice cream are unrelated products, leading to low support. The low support indicates they are rarely bought together. The low confidence further suggests that the occurrence of toothpaste doesn't reliably predict the presence of ice cream. Uncle Steve might not find this rule interesting since it reflects a weak and insignificant association between toothpaste and ice cream, which doesn't provide valuable insights for the grocery store."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "St2eI3We-ZYs"
      },
      "source": [
        "## 2.4: A rule that might have low support and high confidence."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LcdZc-B1-fE7"
      },
      "source": [
        "{Lobster} -> {butter} might have low support and high confidence. even though lobster and butter are not commonly purchased together (low support), when customers buy lobster, there's a high chance they also buy butter (high confidence). This rule could be interesting for Uncle Steve as it highlights a specific pairing that customers prefer. However, the low support indicates that this combination might not be very common, so it might not significantly impact the overall business strategy. Uncle Steve could consider promoting lobster and butter as complementary to those already interested in purchasing lobster.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B_IHoz7f2yIV"
      },
      "source": [
        "# Question 3: Uncle Steve's Credit Union"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WhERdkp_zYBY"
      },
      "source": [
        "## Instructions\n",
        "\n",
        "Uncle Steve has recently opened a new credit union in Kingston, named *Uncle Steve's Credit Union*. He plans to disrupt the local market by instaneously providing credit to customers.\n",
        "\n",
        "The first step in Uncle Steve's master plan is to create a model to predict whether an application has *good risk* or *bad risk*. He has outsourced the creation of this model to you.\n",
        "\n",
        "You are to create a classification model to predict whether a loan applicant has good risk or bad risk. You will use data  that Uncle Steve bought from another credit union (somewhere in Europe, he thinks?) that has around 6000 instances and a number of demographics features (e.g., `Sex`, `DateOfBirth`, `Married`), loan details (e.g., `Amount`, `Purpose`), credit history (e.g., number of loans), as well as an indicator (called `BadCredit` in the dataset) as to whether that person was a bad risk.\n",
        "\n",
        "\n",
        "**Your tasks**\n",
        "\n",
        "To examine the effects of the various ML stages, you are to create the model several times, each time adding more sophistication, and measuring how much the model improved (or not). In particular, you will:\n",
        "\n",
        "0. Split the data in training and testing. Don't touch the testing data again, for any reason, until step 5. We are pretending that the testing data is \"future, unseen data that our model won't see until production.\" I'm serious, don't touch it. I'm watching you!\n",
        "1. Build a baseline model - no feature engineering, no feature selection, no hyperparameter tuning (just use the default settings), nothing fancy. (You may need to do some basic feature transformations, e.g., encoding of categorical features, or dropping of features you do not think will help or do not want to deal with yet.) Measure the performance using K-fold cross validation (recommended: [`sklearn.model_selection.cross_val_score`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html#sklearn.model_selection.cross_val_score)) on the training data. Use at least 5 folds, but more are better. Choose a [`scoring` parameter](https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter) (i.e., classification metric) that you feel is appropriate for this task. Don't use accuracy. Print the mean score of your model.\n",
        "2. Add a bit of feature engineering. The [`sklearn.preprocessing`](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.preprocessing) module contains many useful transformations. Engineer at least three new features. They don't need to be especially ground-breaking or complicated. Dimensionality reduction techniques like [`sklearn.decomposition.PCA`](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html) are fair game but not required. (If you do use dimensionality reduction techniques, it would only count as \"one\" new feature for the purposes of this assignment, even though I realize that PCA creates many new \"features\" (i.e., principal components).) Re-train your baseline model. Measure performance. Compare to step 1.\n",
        "3. Add feature selection. The [`sklearn.feature_selection`](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.feature_selection) has some algorithms for you to choose from. After selecting features, re-train your model, measure performance, and compare to step 2.\n",
        "4. Add hyperparameter tuning. Make reasonable choices and try to find the best (or at least, better) hyperparameters for your estimator and/or transformers. It's probably a good idea to stop using `cross_val_score` at this point and start using [`sklearn.model_selection.GridSearchCV`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV) as it is specifically built for this purpose and is more convienient to use. Measure performance and compare to step 3.\n",
        "5. Finally, using your findings from the previous steps, estimate how well your model will work in production. Use the testing data (our \"future, unseen data\") from step 0. Transform the data as appropriate (easy if you've built a pipeline, a little more difficult if not), use the model from step 4 to get predictions, and measure the performance. How well did we do?\n",
        "\n",
        "\n",
        "**Marking**\n",
        "\n",
        "Each part will be marked for:\n",
        "- *Correctness*. Code clearly and fully performs the task specified.\n",
        "- *Reproducibility*. Code is fully reproducible. I.e., you (and I) should be able to run this Notebook again and again, from top to bottom, and get the same results each and every time.\n",
        "- *Style*. Code is organized. All parts commented with clear reasoning and rationale. No old code laying around. Code easy to follow.\n",
        "\n",
        "\n",
        "**Tips**\n",
        "- The origins of the dataset are a bit of a mystery. Assume the data set is recent (circa 2022) and up-to-date. Assume that column names are correct and accurate.\n",
        "- You don't need to experiment with more than one algorithm/estimator. Just choose one (e.g., [`sklearn.tree.DecisionTreeClassifier`](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier), [`sklearn.ensemble.RandomForestClassifier`](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier), [`sklearn.linear_model.LogisticRegression`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression), [`sklearn.svm.LinearSVC`](https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC), whatever) and stick with it for this question.\n",
        "- There is no minimum accuracy/precision/recall for this question. I.e., your mark will not be based on how good your model is. Rather, you mark will be based on good your process is.\n",
        "- Watch out for data leakage and overfitting. In particular, be sure to `fit()` any estimators and transformers (collectively, *objects*) only to the training data, and then use the objects' `transform()` methods on both the training and testing data. [Data School](https://www.youtube.com/c/dataschool/featured) has a [helpful video](https://www.youtube.com/watch?v=g2XsZdwbCCs) about this. [Pipelines](https://www.youtube.com/watch?v=1Y6O9nCo0-I) are very helpful here and make your code shorter and more robust (at the expense of making it harder to understand), and I recommend using them, but they are not required for this assignment.\n",
        "- Create as many code cells as you need. In general, each cell should do one \"thing.\"\n",
        "-\tDon't print large volumes of output. E.g., don't do: `df.head(100)`\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jqm_REd4oouz"
      },
      "source": [
        "## 3.0: Load data and split"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X6b_BM0Nz9sF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "7500b4e6-25c2-4431-8085-cd7144fb7b0e"
      },
      "source": [
        "# DO NOT MODIFY THIS CELL\n",
        "\n",
        "# First, we'll read the provided labeled training data\n",
        "df3 = pd.read_csv(\"https://drive.google.com/uc?export=download&id=1wOhyCnvGeY4jplxI8lZ-bbYN3zLtickf\")\n",
        "df3.info()\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X = df3.drop('BadCredit', axis=1) #.select_dtypes(['number'])\n",
        "y = df3['BadCredit']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6000 entries, 0 to 5999\n",
            "Data columns (total 17 columns):\n",
            " #   Column             Non-Null Count  Dtype \n",
            "---  ------             --------------  ----- \n",
            " 0   UserID             6000 non-null   object\n",
            " 1   Sex                6000 non-null   object\n",
            " 2   PreviousDefault    6000 non-null   int64 \n",
            " 3   FirstName          6000 non-null   object\n",
            " 4   LastName           6000 non-null   object\n",
            " 5   NumberPets         6000 non-null   int64 \n",
            " 6   PreviousAccounts   6000 non-null   int64 \n",
            " 7   ResidenceDuration  6000 non-null   int64 \n",
            " 8   Street             6000 non-null   object\n",
            " 9   LicensePlate       6000 non-null   object\n",
            " 10  BadCredit          6000 non-null   int64 \n",
            " 11  Amount             6000 non-null   int64 \n",
            " 12  Married            6000 non-null   int64 \n",
            " 13  Duration           6000 non-null   int64 \n",
            " 14  City               6000 non-null   object\n",
            " 15  Purpose            6000 non-null   object\n",
            " 16  DateOfBirth        6000 non-null   object\n",
            "dtypes: int64(8), object(9)\n",
            "memory usage: 797.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sdiKKblCo53S"
      },
      "source": [
        "## 3.1: Baseline model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(df3))\n",
        "df3.isna().sum()"
      ],
      "metadata": {
        "id": "qyfltAqGotWf",
        "outputId": "9f4c3633-d4e9-4875-f5bc-1dc1d020513e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6000\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "UserID               0\n",
              "Sex                  0\n",
              "PreviousDefault      0\n",
              "FirstName            0\n",
              "LastName             0\n",
              "NumberPets           0\n",
              "PreviousAccounts     0\n",
              "ResidenceDuration    0\n",
              "Street               0\n",
              "LicensePlate         0\n",
              "BadCredit            0\n",
              "Amount               0\n",
              "Married              0\n",
              "Duration             0\n",
              "City                 0\n",
              "Purpose              0\n",
              "DateOfBirth          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check data imbalance\n",
        "y = df3['BadCredit']\n",
        "\n",
        "def pie_zero_one(y):\n",
        "    data = pd.DataFrame({1:y.value_counts(dropna=False), '%':y.value_counts(normalize=True,dropna=False)*100})\n",
        "    print(data)\n",
        "\n",
        "    percentage_values = data['%']\n",
        "    labels = data.index\n",
        "    plt.figure(figsize=(4, 4))\n",
        "    plt.pie(percentage_values, labels=labels, autopct='%1.1f%%', startangle=90, wedgeprops={'edgecolor': 'white'})\n",
        "    plt.axis('equal')\n",
        "    plt.title('Data Imbalance')\n",
        "    # Add a white circle in the center to create donut\n",
        "    circle = plt.Circle((0, 0), 0.9, color='white')\n",
        "    plt.gca().add_artist(circle)\n",
        "    plt.show()\n",
        "\n",
        "pie_zero_one(y)"
      ],
      "metadata": {
        "id": "0vrMwF7UotZ1",
        "outputId": "efd829ea-8241-4019-bd8f-cbb9ed18b1a4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      1          %\n",
            "0  4967  82.783333\n",
            "1  1033  17.216667\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Change the birthdate to a date-time object\n",
        "df3['DateOfBirth'] = pd.to_datetime(df3['DateOfBirth'])"
      ],
      "metadata": {
        "id": "qjmdwUbmo2gM"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "# Handle class imbalance using RandomUnderSampler\n",
        "rus = RandomUnderSampler(random_state=42)\n",
        "X_resampled, y_resampled = rus.fit_resample(X_train, y_train)"
      ],
      "metadata": {
        "id": "gXAJjABqo2if"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score, train_test_split\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import f1_score\n",
        "# Create a preprocessing pipeline\n",
        "numeric_features = ['PreviousDefault', 'NumberPets', 'PreviousAccounts', 'ResidenceDuration', 'Amount', 'Duration']\n",
        "categorical_features = ['Sex', 'Married', 'Purpose']\n",
        "\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "# Baseline model using Logistic Regression\n",
        "baseline_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                               ('classifier', LogisticRegression())])\n",
        "\n",
        "# Evaluate baseline model using cross-validation\n",
        "baseline_scores = cross_val_score(baseline_clf, X_train, y_train, cv=5, scoring='f1_macro')\n",
        "print(\"Baseline Model Mean F1 Score:\", baseline_scores.mean())"
      ],
      "metadata": {
        "id": "l1h4np4JCgPp",
        "outputId": "0f244018-db6d-423b-c778-e089d300d740",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Baseline Model Mean F1 Score: 0.6317054968226298\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "yUP9gB-Gtwkj"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ugyTS51Ko5vz"
      },
      "source": [
        "## 3.2: Adding feature engineering"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Feature engineering\n",
        "X_train_fe = X_train.copy()\n",
        "X_train_fe['LoanToIncomeRatio'] = X_train_fe['Amount'] / X_train_fe['NumberPets']\n",
        "X_train_fe['LoanPerDuration'] = X_train_fe['Amount'] / X_train_fe['Duration']\n",
        "X_train_fe['MarriedAndDuration'] = (X_train_fe['Married'] & (X_train_fe['Duration'] > 10)).astype(int)\n",
        "\n",
        "from datetime import datetime\n",
        "\n",
        "# Calculate applicant's age from 'DateOfBirth'\n",
        "X_train['Age'] = pd.to_datetime(X_train['DateOfBirth']).apply(lambda x: (datetime.now() - x).days) / 365\n",
        "\n",
        "# Extract the year of birth from 'DateOfBirth'\n",
        "X_train['YearOfBirth'] = pd.to_datetime(X_train['DateOfBirth']).dt.year\n",
        "\n",
        "\n",
        "# Retrain the baseline model with feature engineering\n",
        "fe_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                         ('classifier', LogisticRegression())])\n",
        "\n",
        "# Evaluate model with feature engineering using cross-validation\n",
        "fe_scores = cross_val_score(fe_clf, X_train_fe, y_train, cv=5, scoring='f1_macro')\n",
        "print(\"Model with Feature Engineering Mean F1 Score:\", fe_scores.mean())"
      ],
      "metadata": {
        "id": "_xhMksly3s2F",
        "outputId": "4813109d-4ed3-4418-ce9f-8f81f29f3ced",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model with Feature Engineering Mean F1 Score: 0.6317054968226298\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PsdD0clko5pz"
      },
      "source": [
        "## 3.3: Adding feature selection"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rxX2ERqzpqxi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "84d17c14-e7c2-4890-a6f2-8c694ccea62f"
      },
      "source": [
        "# Feature selection\n",
        "num_features_to_select = 10  # You can adjust this value\n",
        "\n",
        "# Create a pipeline with feature selection\n",
        "feature_selection_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                        ('feature_selection', SelectKBest(f_classif, k=num_features_to_select)),\n",
        "                                        ('classifier', LogisticRegression())])\n",
        "\n",
        "# Evaluate model with feature selection using cross-validation\n",
        "fs_scores = cross_val_score(feature_selection_clf, X_train_fe, y_train, cv=5, scoring='f1_macro')\n",
        "print(f\"Model with {num_features_to_select} Selected Features Mean F1 Score:\", fs_scores.mean())\n",
        "\n",
        "\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model with 10 Selected Features Mean F1 Score: 0.6323193087639677\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "\n",
        "# Define the number of top features to select\n",
        "k = 10\n",
        "\n",
        "# Create a SelectKBest transformer with the ANOVA F-statistic as the scoring function\n",
        "kbest_selector = SelectKBest(score_func=f_classif, k=k)\n",
        "\n",
        "# Combine the preprocessor with the SelectKBest selector and classifier\n",
        "selected_fe_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('kbest_selector', kbest_selector),\n",
        "                                  ('classifier', LogisticRegression())])\n",
        "\n",
        "# Evaluate the model with feature selection using cross-validation\n",
        "selected_fe_scores = cross_val_score(selected_fe_clf, X_train_fe, y_train, cv=5, scoring='f1_macro')\n",
        "print(\"Model with Feature Selection Mean F1 Score:\", selected_fe_scores.mean())"
      ],
      "metadata": {
        "id": "wRFLWwvwREFp",
        "outputId": "d6c916cd-d8db-4472-a11b-51bad64110cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model with Feature Selection Mean F1 Score: 0.6323193087639677\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ff4l2aNKo5fr"
      },
      "source": [
        "## 3.4: Adding hyperparameter tuning"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hyperparameter tuning\n",
        "param_grid = {\n",
        "    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n",
        "    'classifier__C': [0.001, 0.01, 0.1, 1, 10, 100]\n",
        "}\n",
        "\n",
        "# Create a pipeline with hyperparameter tuning\n",
        "tuned_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                            ('classifier', LogisticRegression())])\n",
        "\n",
        "# Perform GridSearchCV\n",
        "grid_search = GridSearchCV(tuned_clf, param_grid, cv=5, scoring='f1_macro')\n",
        "grid_search.fit(X_train_fe, y_train)\n",
        "\n",
        "# Get the best estimator from GridSearchCV\n",
        "best_clf = grid_search.best_estimator_\n",
        "\n",
        "# Print the best hyperparameters\n",
        "print(\"Best Hyperparameters:\", grid_search.best_params_)\n",
        "\n",
        "# Evaluate model with hyperparameter tuning using cross-validation\n",
        "tuned_scores = cross_val_score(best_clf, X_train_fe, y_train, cv=5, scoring='f1_macro')\n",
        "print(\"Model with Hyperparameter Tuning Mean F1 Score:\", tuned_scores.mean())\n",
        "\n"
      ],
      "metadata": {
        "id": "nN5x0zso-E5n",
        "outputId": "5b06acd0-3599-447b-bc6b-19bcff79a491",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Hyperparameters: {'classifier__C': 10, 'preprocessor__num__imputer__strategy': 'mean'}\n",
            "Model with Hyperparameter Tuning Mean F1 Score: 0.6323929421206752\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Te9gGGLEpXRG"
      },
      "source": [
        "## 3.5: Performance estimation on testing data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Transform the testing data using the best estimator\n",
        "X_test_fe = X_test.copy()\n",
        "X_test_fe['LoanToIncomeRatio'] = X_test_fe['Amount'] / X_test_fe['NumberPets']\n",
        "X_test_fe['LoanPerDuration'] = X_test_fe['Amount'] / X_test_fe['Duration']\n",
        "X_test_fe['MarriedAndDuration'] = (X_test_fe['Married'] & (X_test_fe['Duration'] > 10)).astype(int)\n",
        "\n",
        "# Use the best estimator to predict on the transformed testing data\n",
        "y_pred_production = best_clf.predict(X_test_fe)\n",
        "\n",
        "# Evaluate model performance on testing data\n",
        "f1_production = f1_score(y_test, y_pred_production, average='macro')\n",
        "print(\"F1 Score on Production Testing Data:\", f1_production)"
      ],
      "metadata": {
        "id": "of-PimjL6ojZ",
        "outputId": "2f80e97f-483e-4648-e65a-0ab2800491b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "F1 Score on Production Testing Data: 0.6524211022809469\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "\n",
        "# Print classification report\n",
        "print(\"Classification Report:\")\n",
        "print(classification_report(y_test, y_pred_production))\n",
        "\n",
        "# Generate confusion matrix\n",
        "conf_matrix = confusion_matrix(y_test, y_pred_production)\n",
        "\n",
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
        "            xticklabels=['Good Risk', 'Bad Risk'], yticklabels=['Good Risk', 'Bad Risk'])\n",
        "\n",
        "print(\"Accuracy on Test Data:\", accuracy_score(y_test, y_pred_production))\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('True')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "QaySql9A6xzJ",
        "outputId": "d8976407-01fa-4983-e961-987a6d23f908",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 755
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.97      0.91       991\n",
            "           1       0.64      0.28      0.39       209\n",
            "\n",
            "    accuracy                           0.85      1200\n",
            "   macro avg       0.75      0.62      0.65      1200\n",
            "weighted avg       0.83      0.85      0.82      1200\n",
            "\n",
            "Accuracy on Test Data: 0.8475\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bPiErnUaTQSk"
      },
      "source": [
        "# Question 4: Uncle Steve's Wind Farm"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NzLLQCmKTk9E"
      },
      "source": [
        "## Instructions\n",
        "\n",
        "\n",
        "Uncle Steve has invested in wind. He's built a BIG wind farm with a total of  700 turbines. He's been running the farm for a couple of years now and things are going well. He sells the power generated by the farm to the Kingston government and makes a tidy profit. And, of course, he has been gathering data about the turbines' operations.\n",
        "\n",
        "One area of concern, however, is the cost of maintenece. While the turbines are fairly robust, it seems like one breaks/fails every couple of days. When a turbine fails, it usually costs around \\$20,000 to repair it. Yikes!\n",
        "\n",
        "Currently, Uncle Steve is not doing any preventative maintenance. He just waits until a turbine fails, and then he fixes it. But Uncle Steve has recently learned that if he services a turbine *before* it fails, it will only cost around $2,000.\n",
        "\n",
        "Obviously, there is a potential to save a lot of money here. But first, Uncle Steve would need to figure out *which* turbines are about to fail. Uncle Steve being Uncle Steve, he wants to use ML to build a predictive maintenance model. The model will alert Uncle Steve to potential turbine failures before they happen, giving Uncle Steve a chance to perform an inspection on the turbine and then fix the turbine before it fails. Uncle Steve plans to run the model every morning. For all the turbines that the model predicts will fail, Uncle Steve will order an inspection (which cost a flat \\$500, no matter if the turbine was in good health or not; the \\$500 would not be part of the $2,000 service cost). For the rest of the turbines, Uncle Steve will do nothing.\n",
        "\n",
        "Uncle Steve has used the last few year's worth of operation data to build and assess a model to predict which turbines will fail on any given day. (The data includes useful features like sensor readings, power output, weather, and many more, but those are not important for now.) In fact, he didn't stop there: he built and assessed two models. One model uses using deep learning (in this case, RNNs), and the other uses random forests.\n",
        "\n",
        "He's tuned the bejeebers out of each model and is comfortable that he has found the best-performing version of each. Both models seem really good: both have accuracy scores > 99%. The RNN has better recall, but Uncle Steve is convinced that the random forest model will be better for him since it has better precision. Just to be sure, he has hired you to double check his calculations.\n",
        "\n",
        "**Your task**\n",
        "\n",
        " Which model will save Uncle Steve more money? Justify.\n",
        "\n",
        "\n",
        "In addition to the details above, here is the assessment of each model:\n",
        "\n",
        "- Confusion matrix for the random forest:\n",
        "\n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 201 | 55 |\n",
        "| **Actual No Fail**   | 50 | 255195 |\n",
        "\n",
        "- Confusion matrix for the RNN:\n",
        "\n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 226 | 30 |\n",
        "| **Actual No Fail**   | 1200 | 254045 |\n",
        "\n",
        "\n",
        "**Marking**\n",
        "\n",
        "- *Quality*. Response is well-justified and convincing.\n",
        "- *Style*. Response uses proper grammar, spelling, and punctuation. Response is clear and professional. Response is complete, but not overly-verbose. Response follows length guidelines.\n",
        "\n",
        "\n",
        "\n",
        "**Tips**\n",
        "\n",
        "- Figure out how much Uncle Steve is currently (i.e., without any predictive maintinance models) paying in maintenance costs.\n",
        "- Use the information provided above to create a cost matrix.\n",
        "- Use the cost matrix and the confusion matrices to determine the costs of each model.\n",
        "- The cost of an inspection is the same, no matter if the turbine is in good condition or is about to fail.\n",
        "- If the inspection determines that a turbine is about to fail, then it will be fixed right then and there for the additional fee.\n",
        "- For simplicity, assume the inspections are perfect: i.e., that inspecting a turbine will definitely catch any problems that might exist, and won't accidentally flag an otherwise-healthy turbine.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nAf1SIeKTkfl"
      },
      "source": [
        "Question 4.\n",
        "\n",
        "\n",
        "The logical approach is first to identify and determine our business use case. In this scenario, we aim to help Uncle Steve save costs. To achieve this, we first determine our cost of failure. In this case, Uncle Steve does not do preventive maintenance (i.e. $0 cost). However, it costs him $20,000 to repair a turbine when it fails. Each turbine has associated costs as follows:\n",
        "Cost of current situation = $20, 000 for each failed turbine\n",
        "Cost of service = $ 2,000 each\n",
        "Cost of inspection = $500 (it is the same whether the turbine is about to fail or is in good condition.\n",
        "Predictive model\n",
        "•\tIf the model predicts yes = we will order an inspection (which costs $500)\n",
        "Total Turbine = 255 501\n",
        "Next, we examine the cost matrix for both the Random Forest and RNN models. The cost matrix illustrates the expenses based on the predictions made by each model.\n",
        "\n",
        "Cost matrix for Random Forest Model:\n",
        "\n",
        "\n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 201 | 55 |\n",
        "| **Actual No Fail**   | 50 | 255195 |\n",
        "\n",
        "                              .\n",
        "\n",
        "                              \n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 2500 | 20000 |\n",
        "| **Actual No Fail**   | 2500 | 0 |\n",
        "\n",
        "\n",
        "\t                            =\n",
        "\n",
        "                              \n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 502500 | 1100000 |\n",
        "| **Actual No Fail**   | 125000| 0 |\n",
        "\t   \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Cost matri Cost matrix for RNN Model:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 226 | 30 |\n",
        "| **Actual No Fail**   | 1200 | 254045 |\n",
        "\n",
        "                   \n",
        "\n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 2500 | 20000 |\n",
        "| **Actual No Fail**   | 2500 | 0 |\n",
        "\n",
        "\n",
        "                              =\n",
        "                              \n",
        "|         | Predicted Fail           | Predicted No Fail  |\n",
        "| ------------- |------------| -----:|\n",
        "| **Actual Fail**      | 565000 | 600000 |\n",
        "| **Actual No Fail**   | 3000000| 0 |\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "In this case,  to understand the cost implications, we analyze the outcomes based on predictions:\n",
        "1.\tTrue Positive: for every true positive prediction, we will call an inspector to inspect the turbine for the possibility of failure and fix it right there (which costs $500) while also costing us a service fee of ($2000) to prevent the turbine from failing as cost of failure is $20, 000.\n",
        "2.\tFalse positive: we will inspect and service the turbine. This will also cost us $500 for inspection to determine if the turbine is about to fail and will cost us $2000 to service the turbine to prevent failure.\n",
        "3.\tFalse Negative: this would cost us $20,000 to repair the turbine as we would have assumed the turbine was fine and we wouldn't have inspected it, thereby servicing it. Therefore, lower FN is better in this case.\n",
        "4.\tTrue Negative: This will cost us nothing as the model make an accurate prediction.\n",
        "Based on these considerations, we seek to minimize false negatives as it directly impacts costly turbine failures.\n",
        "Considering the costs incurred in both models, the Random Forest Model appears more advantageous regarding cost savings for Uncle Steve. Its lower false negative cost ($20,000) compared to the RNN Model ($565,000) will result in more effective maintenance planning and substantial cost reductions. Furthermore, the Random Forest Model's superior precision enhances the accuracy of turbine failure predictions, leading to more efficient utilization of preventive maintenance resources and cost-effective decision-making.\n",
        "\n",
        "\n",
        "1.\tTrue Positive: If the model predicts failure, we will order an inspection costing $500 and perform preventive servicing costing $2,000.\n",
        "\n",
        "2.\tFalse Positive: For incorrect predictions of failure, we will still conduct an inspection ($500) and service the turbine to avoid potential failure ($2,000).\n",
        "3.\tFalse Negative: In this case, the turbine fails without warning, incurring a hefty repair cost of $20,000.\n",
        "4.\tTrue Negative: Accurate predictions incur no additional cost.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "eFmuJRo08DAI"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}